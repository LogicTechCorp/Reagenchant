import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

version = mod_version
group = "com.github.logictechcorp"
archivesBaseName = "${mod_name}-${minecraft_version}"

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

compileJava {
    sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
}

minecraft {
    mappings channel: "snapshot", version: "${mcp_version}".toString()

    runs {
        client = {
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    compile project(':LibraryEx')
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${mod_name}",
                "Specification-Vendor"    : "LogicTechCorp",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : "${mod_name}",
                "Implementation-Version"  : "${mod_version}",
                "Implementation-Vendor"   : "LogicTechCorp",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task processDevResources(type: Copy) {
    destinationDir = ((Copy)project.tasks.getByName("processResources")).getDestinationDir()
    from(sourceSets.main.resources.srcDirs) {
        filter tokens: ["file.jarVersion": project.version as String], beginToken: "\${", endToken: "}", ReplaceTokens
    }
}
